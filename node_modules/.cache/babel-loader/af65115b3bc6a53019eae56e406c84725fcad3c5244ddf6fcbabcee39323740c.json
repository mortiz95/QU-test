{"ast":null,"code":"import { defineComponent, ref, computed, watch, onBeforeMount } from 'vue';\nimport swapiPlanet from '@/api/swapiService';\nexport default defineComponent({\n  name: \"TablePlanet\",\n  setup() {\n    const data = ref([]); // Holds the API data\n    const sortBy = ref(null); // Holds the current sorting column\n    const sortDesc = ref(false); // Determines whether to sort in descending order\n    const sortedData = computed(() => data.value);\n    onBeforeMount(async () => {\n      data.value = await swapiPlanet.fetchData();\n    });\n\n    // Watch the sortBy and sortDesc refs for changes and sort the data accordingly\n    watch([sortBy, sortDesc], () => {\n      if (sortBy.value) {\n        data.value.sort((a, b) => {\n          const modifier = sortDesc.value ? -1 : 1;\n          if (a[sortBy.value] < b[sortBy.value]) return -1 * modifier;\n          if (a[sortBy.value] > b[sortBy.value]) return 1 * modifier;\n          return 0;\n        });\n      }\n    });\n    const sort = column => {\n      if (sortBy.value === column) {\n        sortDesc.value = !sortDesc.value;\n      } else {\n        sortBy.value = column;\n        sortDesc.value = false;\n      }\n    };\n\n    // Return the reactive data and methods\n    return {\n      data,\n      sortBy,\n      sortDesc,\n      sort,\n      sortedData\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","ref","computed","watch","onBeforeMount","swapiPlanet","name","setup","data","sortBy","sortDesc","sortedData","value","fetchData","sort","a","b","modifier","column"],"sources":["/Users/matiasortiz/qu-test-api-table/src/components/Table.vue"],"sourcesContent":["<template>\n  <div>\n    <table>\n      <thead>\n        <tr>\n         \n          <th @click=\"sort('name')\">Name</th>\n          <th @click=\"sort('climate')\">Climate</th>\n          <th @click=\"sort('diameter')\">Diameter</th>\n          <th @click=\"sort('gravity')\">Gravity</th>\n          <th @click=\"sort('created')\">Created</th>\n          <th @click=\"sort('orbital_period')\">Orbital Period</th>\n          <th @click=\"sort('population')\">Population</th>\n          <th @click=\"sort('rotation_period')\">Rotation Period</th>\n          <th @click=\"sort('surface_water')\">Surface Water</th>\n          <th @click=\"sort('terrain')\">Terrain</th>\n          <th @click=\"sort('created')\">Created</th>\n          <th @click=\"sort('age')\">Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item,index) in sortedData\" :key=\"index\">\n          <td>{{ item.name }}</td>\n          <td>{{ item.name }}</td>\n          <td>{{ item.name }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, computed, watch, onBeforeMount } from 'vue';\nimport swapiPlanet from '@/api/swapiService';\n\nexport default defineComponent({\n   name: \"TablePlanet\",\n   setup() {\n\n    const data = ref([]); // Holds the API data\n    const sortBy = ref(null); // Holds the current sorting column\n    const sortDesc = ref(false); // Determines whether to sort in descending order\n    const sortedData = computed(() => data.value)\n\n    onBeforeMount(async() => {\n      data.value = await swapiPlanet.fetchData()\n    });\n\n    // Watch the sortBy and sortDesc refs for changes and sort the data accordingly\n    watch([sortBy, sortDesc], () => {\n      if (sortBy.value) {\n        data.value.sort((a, b) => {\n          const modifier = sortDesc.value ? -1 : 1;\n          if (a[sortBy.value] < b[sortBy.value]) return -1 * modifier;\n          if (a[sortBy.value] > b[sortBy.value]) return 1 * modifier;\n          return 0;\n        });\n      }\n    });\n\n    const sort = (column) => {\n      if (sortBy.value === column) {\n          sortDesc.value = !sortDesc.value;\n        } else {\n          sortBy.value = column;\n          sortDesc.value = false;\n        }\n\n    }\n\n    // Return the reactive data and methods\n    return {\n      data,\n      sortBy,\n      sortDesc,\n      sort,\n      sortedData\n    };\n  },\n});\n</script>\n"],"mappings":"AAgCA,SAASA,eAAe,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,aAAY,QAAS,KAAK;AAC1E,OAAOC,WAAU,MAAO,oBAAoB;AAE5C,eAAeL,eAAe,CAAC;EAC5BM,IAAI,EAAE,aAAa;EACnBC,KAAKA,CAAA,EAAG;IAEP,MAAMC,IAAG,GAAIP,GAAG,CAAC,EAAE,CAAC,EAAE;IACtB,MAAMQ,MAAK,GAAIR,GAAG,CAAC,IAAI,CAAC,EAAE;IAC1B,MAAMS,QAAO,GAAIT,GAAG,CAAC,KAAK,CAAC,EAAE;IAC7B,MAAMU,UAAS,GAAIT,QAAQ,CAAC,MAAMM,IAAI,CAACI,KAAK;IAE5CR,aAAa,CAAC,YAAW;MACvBI,IAAI,CAACI,KAAI,GAAI,MAAMP,WAAW,CAACQ,SAAS,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACAV,KAAK,CAAC,CAACM,MAAM,EAAEC,QAAQ,CAAC,EAAE,MAAM;MAC9B,IAAID,MAAM,CAACG,KAAK,EAAE;QAChBJ,IAAI,CAACI,KAAK,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACxB,MAAMC,QAAO,GAAIP,QAAQ,CAACE,KAAI,GAAI,CAAC,IAAI,CAAC;UACxC,IAAIG,CAAC,CAACN,MAAM,CAACG,KAAK,IAAII,CAAC,CAACP,MAAM,CAACG,KAAK,CAAC,EAAE,OAAO,CAAC,IAAIK,QAAQ;UAC3D,IAAIF,CAAC,CAACN,MAAM,CAACG,KAAK,IAAII,CAAC,CAACP,MAAM,CAACG,KAAK,CAAC,EAAE,OAAO,IAAIK,QAAQ;UAC1D,OAAO,CAAC;QACV,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF,MAAMH,IAAG,GAAKI,MAAM,IAAK;MACvB,IAAIT,MAAM,CAACG,KAAI,KAAMM,MAAM,EAAE;QACzBR,QAAQ,CAACE,KAAI,GAAI,CAACF,QAAQ,CAACE,KAAK;MAClC,OAAO;QACLH,MAAM,CAACG,KAAI,GAAIM,MAAM;QACrBR,QAAQ,CAACE,KAAI,GAAI,KAAK;MACxB;IAEJ;;IAEA;IACA,OAAO;MACLJ,IAAI;MACJC,MAAM;MACNC,QAAQ;MACRI,IAAI;MACJH;IACF,CAAC;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}