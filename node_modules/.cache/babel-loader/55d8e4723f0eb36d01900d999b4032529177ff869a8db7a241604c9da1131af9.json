{"ast":null,"code":"import { defineComponent, ref, computed } from 'vue';\nimport swapi from '@/api/swapiService';\nexport default defineComponent({\n  name: 'DataTable',\n  async setup() {\n    const data = ref([]); // Holds the API data\n    const sortBy = ref(null); // Holds the current sorting column\n    const sortDesc = ref(false); // Determines whether to sort in descending order\n\n    // Fetch data from the API\n    /*const fetchData = async () => {\n      try {\n        const response = await axios.get('https://swapi.dev/api/planets');\n        data.value = response.data.results; // Update the data ref with the fetched data\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };*/\n\n    data.value = await swapi.fetchData();\n\n    // Watch the sortBy and sortDesc refs for changes and sort the data accordingly\n    /*     watch([sortBy, sortDesc], () => {\n          if (sortBy.value) {\n            data.value.sort((a, b) => {\n              const modifier = sortDesc.value ? -1 : 1;\n              if (a[sortBy.value] < b[sortBy.value]) return -1 * modifier;\n              if (a[sortBy.value] > b[sortBy.value]) return 1 * modifier;\n              return 0;\n            });\n          }\n        }); */\n\n    // Call the fetchData method when the component is mounted\n    //fetchData();\n\n    // Return the reactive data and methods\n    return {\n      data,\n      sortBy,\n      sortDesc,\n      sort(column) {\n        if (sortBy.value === column) {\n          sortDesc.value = !sortDesc.value;\n        } else {\n          sortBy.value = column;\n          sortDesc.value = false;\n        }\n      },\n      sortedData: computed(() => data.value)\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","ref","computed","swapi","name","setup","data","sortBy","sortDesc","value","fetchData","sort","column","sortedData"],"sources":["/Users/matiasortiz/qu-test-api-table/src/App.vue"],"sourcesContent":["<template>\n\n<Suspense>\n  <!-- component with nested async dependencies -->\n  <div>\n    <table>\n      <thead>\n        <tr>\n          <th @click=\"sort('id')\">ID</th>\n          <th @click=\"sort('name')\">Name</th>\n          <th @click=\"sort('age')\">Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item,index) in sortedData\" :key=\"index\">\n          <td>{{ item.name }}</td>\n          <td>{{ item.name }}</td>\n          <td>{{ item.name }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <!-- loading state via #fallback slot -->\n  <template #fallback>\n    Loading...\n  </template>\n</Suspense>\n\n</template>\n\n<script>\nimport { defineComponent, ref, computed, } from 'vue';\n\nimport swapi from '@/api/swapiService';\n\nexport default defineComponent({\n  name: 'DataTable',\n  async setup() {\n    const data = ref([]); // Holds the API data\n    const sortBy = ref(null); // Holds the current sorting column\n    const sortDesc = ref(false); // Determines whether to sort in descending order\n\n    // Fetch data from the API\n    /*const fetchData = async () => {\n      try {\n        const response = await axios.get('https://swapi.dev/api/planets');\n        data.value = response.data.results; // Update the data ref with the fetched data\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };*/\n\n    data.value = await swapi.fetchData()\n\n    // Watch the sortBy and sortDesc refs for changes and sort the data accordingly\n/*     watch([sortBy, sortDesc], () => {\n      if (sortBy.value) {\n        data.value.sort((a, b) => {\n          const modifier = sortDesc.value ? -1 : 1;\n          if (a[sortBy.value] < b[sortBy.value]) return -1 * modifier;\n          if (a[sortBy.value] > b[sortBy.value]) return 1 * modifier;\n          return 0;\n        });\n      }\n    }); */\n\n  \n\n\n    // Call the fetchData method when the component is mounted\n    //fetchData();\n\n    // Return the reactive data and methods\n    return {\n      data,\n      sortBy,\n      sortDesc,\n      sort(column) {\n        if (sortBy.value === column) {\n          sortDesc.value = !sortDesc.value;\n        } else {\n          sortBy.value = column;\n          sortDesc.value = false;\n        }\n      },\n      sortedData: computed(() => data.value),\n    };\n  },\n});\n</script>\n"],"mappings":"AAgCA,SAASA,eAAe,EAAEC,GAAG,EAAEC,QAAQ,QAAS,KAAK;AAErD,OAAOC,KAAI,MAAO,oBAAoB;AAEtC,eAAeH,eAAe,CAAC;EAC7BI,IAAI,EAAE,WAAW;EACjB,MAAMC,KAAKA,CAAA,EAAG;IACZ,MAAMC,IAAG,GAAIL,GAAG,CAAC,EAAE,CAAC,EAAE;IACtB,MAAMM,MAAK,GAAIN,GAAG,CAAC,IAAI,CAAC,EAAE;IAC1B,MAAMO,QAAO,GAAIP,GAAG,CAAC,KAAK,CAAC,EAAE;;IAE7B;IACA;;;;;;;;;IASAK,IAAI,CAACG,KAAI,GAAI,MAAMN,KAAK,CAACO,SAAS,CAAC;;IAEnC;IACJ;;;;;;;;;;;IAcI;IACA;;IAEA;IACA,OAAO;MACLJ,IAAI;MACJC,MAAM;MACNC,QAAQ;MACRG,IAAIA,CAACC,MAAM,EAAE;QACX,IAAIL,MAAM,CAACE,KAAI,KAAMG,MAAM,EAAE;UAC3BJ,QAAQ,CAACC,KAAI,GAAI,CAACD,QAAQ,CAACC,KAAK;QAClC,OAAO;UACLF,MAAM,CAACE,KAAI,GAAIG,MAAM;UACrBJ,QAAQ,CAACC,KAAI,GAAI,KAAK;QACxB;MACF,CAAC;MACDI,UAAU,EAAEX,QAAQ,CAAC,MAAMI,IAAI,CAACG,KAAK;IACvC,CAAC;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}