{"ast":null,"code":"import { defineComponent, ref, computed, watch } from 'vue';\nimport swapi from '@/api/swapiService';\nexport default defineComponent({\n  name: 'DataTable',\n  setup() {\n    const data = ref([]); // Holds the API data\n    const sortBy = ref(null); // Holds the current sorting column\n    const sortDesc = ref(false); // Determines whether to sort in descending order\n\n    // Fetch data from the API\n    /*const fetchData = async () => {\n      try {\n        const response = await axios.get('https://swapi.dev/api/planets');\n        data.value = response.data.results; // Update the data ref with the fetched data\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };*/\n\n    onBeforeUnmount(async () => {\n      data.value = await swapi.fetchData();\n    });\n\n    // Watch the sortBy and sortDesc refs for changes and sort the data accordingly\n    watch([sortBy, sortDesc], () => {\n      if (sortBy.value) {\n        data.value.sort((a, b) => {\n          const modifier = sortDesc.value ? -1 : 1;\n          if (a[sortBy.value] < b[sortBy.value]) return -1 * modifier;\n          if (a[sortBy.value] > b[sortBy.value]) return 1 * modifier;\n          return 0;\n        });\n      }\n    });\n\n    // Call the fetchData method when the component is mounted\n    //fetchData();\n\n    // Return the reactive data and methods\n    return {\n      data,\n      sortBy,\n      sortDesc,\n      sort(column) {\n        if (sortBy.value === column) {\n          sortDesc.value = !sortDesc.value;\n        } else {\n          sortBy.value = column;\n          sortDesc.value = false;\n        }\n      },\n      sortedData: computed(() => data.value)\n    };\n  }\n});","map":{"version":3,"names":["defineComponent","ref","computed","watch","swapi","name","setup","data","sortBy","sortDesc","onBeforeUnmount","value","fetchData","sort","a","b","modifier","column","sortedData"],"sources":["/Users/matiasortiz/qu-test-api-table/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <table>\n      <thead>\n        <tr>\n          <th @click=\"sort('id')\">ID</th>\n          <th @click=\"sort('name')\">Name</th>\n          <th @click=\"sort('age')\">Age</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(item,index) in sortedData\" :key=\"index\">\n          <td>{{ item.name }}</td>\n          <td>{{ item.name }}</td>\n          <td>{{ item.name }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, computed, watch } from 'vue';\n\nimport swapi from '@/api/swapiService';\n\nexport default defineComponent({\n  name: 'DataTable',\n   setup() {\n    const data = ref([]); // Holds the API data\n    const sortBy = ref(null); // Holds the current sorting column\n    const sortDesc = ref(false); // Determines whether to sort in descending order\n\n    // Fetch data from the API\n    /*const fetchData = async () => {\n      try {\n        const response = await axios.get('https://swapi.dev/api/planets');\n        data.value = response.data.results; // Update the data ref with the fetched data\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };*/\n\n    onBeforeUnmount(async() => {\n      data.value = await swapi.fetchData()\n    });\n\n    \n\n    // Watch the sortBy and sortDesc refs for changes and sort the data accordingly\n    watch([sortBy, sortDesc], () => {\n      if (sortBy.value) {\n        data.value.sort((a, b) => {\n          const modifier = sortDesc.value ? -1 : 1;\n          if (a[sortBy.value] < b[sortBy.value]) return -1 * modifier;\n          if (a[sortBy.value] > b[sortBy.value]) return 1 * modifier;\n          return 0;\n        });\n      }\n    });\n\n\n    // Call the fetchData method when the component is mounted\n    //fetchData();\n\n    // Return the reactive data and methods\n    return {\n      data,\n      sortBy,\n      sortDesc,\n      sort(column) {\n        if (sortBy.value === column) {\n          sortDesc.value = !sortDesc.value;\n        } else {\n          sortBy.value = column;\n          sortDesc.value = false;\n        }\n      },\n      sortedData: computed(() => data.value),\n    };\n  },\n});\n</script>\n"],"mappings":"AAsBA,SAASA,eAAe,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,KAAI,QAAS,KAAK;AAE3D,OAAOC,KAAI,MAAO,oBAAoB;AAEtC,eAAeJ,eAAe,CAAC;EAC7BK,IAAI,EAAE,WAAW;EAChBC,KAAKA,CAAA,EAAG;IACP,MAAMC,IAAG,GAAIN,GAAG,CAAC,EAAE,CAAC,EAAE;IACtB,MAAMO,MAAK,GAAIP,GAAG,CAAC,IAAI,CAAC,EAAE;IAC1B,MAAMQ,QAAO,GAAIR,GAAG,CAAC,KAAK,CAAC,EAAE;;IAE7B;IACA;;;;;;;;;IASAS,eAAe,CAAC,YAAW;MACzBH,IAAI,CAACI,KAAI,GAAI,MAAMP,KAAK,CAACQ,SAAS,CAAC;IACrC,CAAC,CAAC;;IAIF;IACAT,KAAK,CAAC,CAACK,MAAM,EAAEC,QAAQ,CAAC,EAAE,MAAM;MAC9B,IAAID,MAAM,CAACG,KAAK,EAAE;QAChBJ,IAAI,CAACI,KAAK,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACxB,MAAMC,QAAO,GAAIP,QAAQ,CAACE,KAAI,GAAI,CAAC,IAAI,CAAC;UACxC,IAAIG,CAAC,CAACN,MAAM,CAACG,KAAK,IAAII,CAAC,CAACP,MAAM,CAACG,KAAK,CAAC,EAAE,OAAO,CAAC,IAAIK,QAAQ;UAC3D,IAAIF,CAAC,CAACN,MAAM,CAACG,KAAK,IAAII,CAAC,CAACP,MAAM,CAACG,KAAK,CAAC,EAAE,OAAO,IAAIK,QAAQ;UAC1D,OAAO,CAAC;QACV,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAGF;IACA;;IAEA;IACA,OAAO;MACLT,IAAI;MACJC,MAAM;MACNC,QAAQ;MACRI,IAAIA,CAACI,MAAM,EAAE;QACX,IAAIT,MAAM,CAACG,KAAI,KAAMM,MAAM,EAAE;UAC3BR,QAAQ,CAACE,KAAI,GAAI,CAACF,QAAQ,CAACE,KAAK;QAClC,OAAO;UACLH,MAAM,CAACG,KAAI,GAAIM,MAAM;UACrBR,QAAQ,CAACE,KAAI,GAAI,KAAK;QACxB;MACF,CAAC;MACDO,UAAU,EAAEhB,QAAQ,CAAC,MAAMK,IAAI,CAACI,KAAK;IACvC,CAAC;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}