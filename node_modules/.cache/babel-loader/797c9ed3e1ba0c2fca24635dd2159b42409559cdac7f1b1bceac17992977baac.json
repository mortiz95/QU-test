{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"p-4\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h3\", null, \"Star Wars Planets\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"table-planets\"\n};\nconst _hoisted_4 = {\n  class: \"table table-sm table-striped\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"material-icons\"\n};\nconst _hoisted_6 = {\n  key: 1,\n  class: \"material-icons\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"material-icons\"\n};\nconst _hoisted_8 = {\n  key: 1,\n  class: \"material-icons\"\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"material-icons\"\n};\nconst _hoisted_10 = {\n  key: 1,\n  class: \"material-icons\"\n};\nconst _hoisted_11 = {\n  key: 0,\n  class: \"material-icons\"\n};\nconst _hoisted_12 = {\n  key: 1,\n  class: \"material-icons\"\n};\nconst _hoisted_13 = {\n  key: 0,\n  class: \"material-icons\"\n};\nconst _hoisted_14 = {\n  key: 1,\n  class: \"material-icons\"\n};\nconst _hoisted_15 = {\n  class: \"table-group-divider\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"table\", _hoisted_4, [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.sort('name'))\n  }, [_createTextVNode(\"Name \"), _ctx.sortBy == 'name' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5, _toDisplayString(_ctx.arrowIconName), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_6, \"sort\"))]), _createElementVNode(\"th\", {\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.sort('climate'))\n  }, [_createTextVNode(\"Climate \"), _ctx.sortBy == 'climate' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, _toDisplayString(_ctx.arrowIconName), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_8, \"sort\"))]), _createElementVNode(\"th\", {\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.sort('diameter'))\n  }, \"Diameter\"), _createElementVNode(\"th\", {\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.sort('gravity'))\n  }, \"Gravity\"), _createElementVNode(\"th\", {\n    onClick: _cache[4] || (_cache[4] = $event => _ctx.sort('created'))\n  }, [_createTextVNode(\"Created \"), _ctx.sortBy == 'created' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_9, _toDisplayString(_ctx.arrowIconName), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_10, \"sort\"))]), _createElementVNode(\"th\", {\n    onClick: _cache[5] || (_cache[5] = $event => _ctx.sort('orbital_period'))\n  }, \"Orbital Period\"), _createElementVNode(\"th\", {\n    onClick: _cache[6] || (_cache[6] = $event => _ctx.sort('population'))\n  }, \"Population\"), _createElementVNode(\"th\", {\n    onClick: _cache[7] || (_cache[7] = $event => _ctx.sort('rotation_period'))\n  }, \"Rotation Period\"), _createElementVNode(\"th\", {\n    onClick: _cache[8] || (_cache[8] = $event => _ctx.sort('surface_water'))\n  }, \"Surface Water\"), _createElementVNode(\"th\", {\n    onClick: _cache[9] || (_cache[9] = $event => _ctx.sort('terrain'))\n  }, [_createTextVNode(\"Terrain \"), _ctx.sortBy == 'terrain' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_11, _toDisplayString(_ctx.arrowIconName), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_12, \"sort\"))]), _createElementVNode(\"th\", {\n    onClick: _cache[10] || (_cache[10] = $event => _ctx.sort('edited'))\n  }, [_createTextVNode(\"Edited \"), _ctx.sortBy == 'edited' ? (_openBlock(), _createElementBlock(\"span\", _hoisted_13, _toDisplayString(_ctx.arrowIconName), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_14, \"sort\"))])])]), _createElementVNode(\"tbody\", _hoisted_15, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.sortedData, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.climate), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.diameter), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.gravity), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(_ctx.formatDate(item.created)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.orbital_period), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.population), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.rotation_period), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.surface_water), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.terrain), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(_ctx.formatDate(item.edited)), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","$event","_ctx","sort","sortBy","_hoisted_5","_toDisplayString","arrowIconName","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_Fragment","_renderList","sortedData","item","index","key","name","climate","diameter","gravity","formatDate","created","orbital_period","population","rotation_period","surface_water","terrain","edited"],"sources":["/Users/matiasortiz/qu-test-api-table/src/components/Table.vue"],"sourcesContent":["<template>\n  <div class=\"p-4\">\n    <h3>Star Wars Planets</h3>\n    <div class=\"table-planets\">\n      <table class=\"table table-sm table-striped\">\n        <thead>\n          <tr>\n            <th @click=\"sort('name')\">Name\n              <span v-if=\"sortBy == 'name'\" class=\"material-icons\">{{arrowIconName}}</span>\n              <span v-else class=\"material-icons\">sort</span>\n            </th>\n            <th @click=\"sort('climate')\">Climate\n              <span v-if=\"sortBy == 'climate'\" class=\"material-icons\">{{arrowIconName}}</span>\n              <span v-else class=\"material-icons\">sort</span>\n            </th>\n            <th @click=\"sort('diameter')\">Diameter</th>\n            <th @click=\"sort('gravity')\">Gravity</th>\n            <th @click=\"sort('created')\">Created\n              <span v-if=\"sortBy == 'created'\" class=\"material-icons\">{{arrowIconName}}</span>\n              <span v-else class=\"material-icons\">sort</span>\n            </th>\n            <th @click=\"sort('orbital_period')\">Orbital Period</th>\n            <th @click=\"sort('population')\">Population</th>\n            <th @click=\"sort('rotation_period')\">Rotation Period</th>\n            <th @click=\"sort('surface_water')\">Surface Water</th>\n            <th @click=\"sort('terrain')\">Terrain\n              <span v-if=\"sortBy == 'terrain'\" class=\"material-icons\">{{arrowIconName}}</span>\n              <span v-else class=\"material-icons\">sort</span>\n            </th>\n            <th @click=\"sort('edited')\">Edited\n              <span v-if=\"sortBy == 'edited'\" class=\"material-icons\">{{arrowIconName}}</span>\n              <span v-else class=\"material-icons\">sort</span>\n            </th>\n          </tr>\n        </thead>\n        <tbody class=\"table-group-divider\">\n          <tr v-for=\"(item, index) in sortedData\" :key=\"index\">\n            <td>{{ item.name }}</td>\n            <td>{{ item.climate }}</td>\n            <td>{{ item.diameter }}</td>\n            <td>{{ item.gravity }}</td>\n            <td>{{ formatDate(item.created) }}</td>\n            <td>{{ item.orbital_period }}</td>\n            <td>{{ item.population }}</td>\n            <td>{{ item.rotation_period }}</td>\n            <td>{{ item.surface_water }}</td>\n            <td>{{ item.terrain }}</td>\n            <td>{{ formatDate(item.edited) }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div> \n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, computed, watch, onBeforeMount } from 'vue';\nimport swapiPlanet from '@/api/swapiService';\n\nimport formatDate from '@/composables/DateComposable';\n\nexport default defineComponent({\n  name: \"TablePlanet\",\n  setup() {\n\n    const data = ref([]); // Holds the API data\n    const sortBy = ref(null); // Holds the current sorting column\n    const sortDesc = ref(false); // Determines whether to sort in descending order\n    const arrowIconName = ref(\"arrow_drop_up\");\n    const sortedData = computed(() => data.value)\n\n    onBeforeMount(async () => {\n      data.value = await swapiPlanet.fetchData()\n    });\n\n    // Watch the sortBy and sortDesc refs for changes and sort the data accordingly\n    watch([sortBy, sortDesc], () => {\n      if (sortBy.value) {\n        data.value.sort((a, b) => {\n          const modifier = sortDesc.value ? -1 : 1;\n          modifier === 1 ?  arrowIconName.value = \"arrow_drop_up\" : arrowIconName.value = \"arrow_drop_down\" ;\n          if (a[sortBy.value] < b[sortBy.value]) return -1 * modifier;\n          if (a[sortBy.value] > b[sortBy.value]) return 1 * modifier;\n          return 0;\n        });\n      }\n    });\n\n    const sort = (column) => {\n      if (sortBy.value === column) {\n        sortDesc.value = !sortDesc.value;\n      } else {\n        sortBy.value = column;\n        sortDesc.value = false;\n      }\n\n    };\n\n    // Return the reactive data and methods\n    return {\n      data,\n      sortBy,\n      sortDesc,\n      sortedData,\n      arrowIconName,\n      formatDate,\n      sort,\n      \n    };\n  },\n});\n</script>\n<style>\n\n.table-planets{\n    padding: 1rem;\n    border: solid var(--bs-border-color);\n    border-width: 1px;\n    border-radius: var(--bs-border-radius);\n}\n\n.material-icons {\n    vertical-align: -6px;\n}\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}